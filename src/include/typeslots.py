__all__ = [
    'TYPESLOTS',
]


import enum

from .. import FlagGroup


class TYPESLOTS(FlagGroup):

    def __str__(self):
        return f'Py_{self._name_}'

    bf_getbuffer               = enum.auto()
    bf_releasebuffer           = enum.auto()
    mp_ass_subscript           = enum.auto()
    mp_length                  = enum.auto()
    mp_subscript               = enum.auto()
    nb_absolute                = enum.auto()
    nb_add                     = enum.auto()
    nb_and                     = enum.auto()
    nb_bool                    = enum.auto()
    nb_divmod                  = enum.auto()
    nb_float                   = enum.auto()
    nb_floor_divide            = enum.auto()
    nb_index                   = enum.auto()
    nb_inplace_add             = enum.auto()
    nb_inplace_and             = enum.auto()
    nb_inplace_floor_divide    = enum.auto()
    nb_inplace_lshift          = enum.auto()
    nb_inplace_multiply        = enum.auto()
    nb_inplace_or              = enum.auto()
    nb_inplace_power           = enum.auto()
    nb_inplace_remainder       = enum.auto()
    nb_inplace_rshift          = enum.auto()
    nb_inplace_subtract        = enum.auto()
    nb_inplace_true_divide     = enum.auto()
    nb_inplace_xor             = enum.auto()
    nb_int                     = enum.auto()
    nb_invert                  = enum.auto()
    nb_lshift                  = enum.auto()
    nb_multiply                = enum.auto()
    nb_negative                = enum.auto()
    nb_or                      = enum.auto()
    nb_positive                = enum.auto()
    nb_power                   = enum.auto()
    nb_remainder               = enum.auto()
    nb_rshift                  = enum.auto()
    nb_subtract                = enum.auto()
    nb_true_divide             = enum.auto()
    nb_xor                     = enum.auto()
    sq_ass_item                = enum.auto()
    sq_concat                  = enum.auto()
    sq_contains                = enum.auto()
    sq_inplace_concat          = enum.auto()
    sq_inplace_repeat          = enum.auto()
    sq_item                    = enum.auto()
    sq_length                  = enum.auto()
    sq_repeat                  = enum.auto()
    tp_alloc                   = enum.auto()
    tp_base                    = enum.auto()
    tp_bases                   = enum.auto()
    tp_call                    = enum.auto()
    tp_clear                   = enum.auto()
    tp_dealloc                 = enum.auto()
    tp_del                     = enum.auto()
    tp_descr_get               = enum.auto()
    tp_descr_set               = enum.auto()
    tp_doc                     = enum.auto()
    tp_getattr                 = enum.auto()
    tp_getattro                = enum.auto()
    tp_hashv                   = enum.auto()
    tp_init                    = enum.auto()
    tp_is_gc                   = enum.auto()
    tp_iter                    = enum.auto()
    tp_iternext                = enum.auto()
    tp_methods                 = enum.auto()
    tp_new                     = enum.auto()
    tp_repr                    = enum.auto()
    tp_richcompare             = enum.auto()
    tp_setattr                 = enum.auto()
    tp_setattro                = enum.auto()
    tp_str                     = enum.auto()
    tp_traverse                = enum.auto()
    tp_members                 = enum.auto()
    tp_getset                  = enum.auto()
    tp_free                    = enum.auto()
    nb_matrix_multiply         = enum.auto()
    nb_inplace_matrix_multiply = enum.auto()
    am_await                   = enum.auto()
    am_aiter                   = enum.auto()
    am_anext                   = enum.auto()
    tp_finalize                = enum.auto()
